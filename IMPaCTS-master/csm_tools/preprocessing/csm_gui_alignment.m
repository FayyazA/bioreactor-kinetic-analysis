classdef csm_gui_alignment < csm_figure
% CSM_GUI_ALIGNMENT - Performs Recursive Segment-wise Peak Alignment (RSPA) or constrained correlation optimised warping (CCOW) alignment on user-defined segments.
%
% Usage:
%
% 	figure = csm_gui_alignment( spectra, 'rspa_model', rspa_model )
%
% Arguments:
%
%	*spectra : (csm_spectra) csm_spectra object containing spectral matrix.
%
%	rspa_model : (csm_rspa) RSPA model as generated by csm_rspa.
%
% Returns:
%
%	figure : (obj) csm_figure_handle with some stored inputs, the handle and auditInfo.
%
% Description:
%
%	Utilises the uiAlignment function written by Kiril Veselkov.
%
%	Uses rspa_model if provided - otherwise uses spectra.
%
%
% Copyright (C) Division of Computational and Systems Medicine, Imperial College London - 2014 

% Author: Gordon Haggart, 2014


	methods

		% Constructor for csm_plot_spectra
		function [obj] = csm_gui_alignment( spectra, varargin )

            obj = obj @ csm_figure( varargin{:} );
            
            % Allows creation of empty objects for cloning
            if nargin == 0
                return
            end
						
			if ~spectra.isContinuous( )
                
               error( 'This function only works with continuous data' );
                
            end

            obj = assignDefaults ( obj, spectra, varargin );

			obj = parseInput( obj );

			obj = callBaseTool( obj );

			obj = runAuditInfoMethods( obj );

			obj = parseOutput( obj );

        end
        
        % Assign the inputs
		function [obj] = assignDefaults( obj, spectra, varargin )
			
			obj.input.spectra = spectra;
            
            obj.optional_defaults = containers.Map;

            % Optional arguments with defaults
            obj.optional_defaults( 'rspa_model' ) = [];
            
            obj = overwriteSpecifiedOptions( obj , varargin{:} );
            
            % Set dependant defaults
            if ismember( 'rspa_model', obj.set_options )
               
                obj.input.aligned_X = obj.input.rspa_model.output.aligned_spectra.X;
            
            else
                
                obj.input.aligned_X = 13000 .* spectra.X ./ median( median( spectra.X ) );
                            
            end
						
        end
        
		% Assign the inputs and default options
		function [obj] = parseInput( obj )
            
            obj.inputparser = inputParser;
                        
            addRequired( obj.inputparser , 'spectra' , @( x ) isa( x, 'csm_spectra') )
            
            parse( obj.inputparser, obj.input.spectra );
   
		end

		% Call the uiAlignment function
		function [obj] = callBaseTool( obj )

			obj.linkprop = uiAlignment( obj.input.spectra.x_scale, obj.input.spectra.X, obj.input.aligned_X );

		end

		% Parse the model output
		function [obj] = parseOutput( obj )

			obj.tmp = '';

		end

		% Run the auditInfo methods (must be run)
		function [obj] = runAuditInfoMethods( obj )

			obj.class_name = class( obj );

			runAuditInfoMethods @ csm_figure( obj );

		end	

	end
	
end





