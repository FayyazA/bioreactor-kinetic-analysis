function [handles] = CJSpcaPlot(model,ppm,X,varargin)
% function for plotting scores (with option to colour by class) and 
% loadings plots from PCA
%
% Arguments:
% model (structure) = PCA model as generated by mypcaCS (mypcaCS used as
%                     pareto scaling enabled)
% ppm (1,nv) = ppm scale
% X (ns,nv) = spectral data
%
% Optional arguments  (in 'name', value pairs)
% name                value options
% plottype (str)    = plots required; options 'all','scores','loadings'
%                     (default: 'all')
% class (ns,nm)     = class membership/metadata for each of ns samples and nm
%                     groupings (default: all samples in same class)
% class_col (ns,nm) = 0 where class is discrete, 1 if continuous (default: 
%                     discrete)                      
% class_labels {1,nm} = cell array of strings; class titles for plotting 
%                      (default: none)
% sample_labels {ns,1}  = cell array of strings; sample labels for plotting
%                      (default: none)
% components (1,nc)  = components to plot (default: all)
% savedir, (char) = fullfile path and name to save figure to
%                     (default = not saved)
% closefigs, (char) = if 'y' closes loadings plot (plots generated using
%                     CJSqueryplot error unless saved my user)
%                     (default = 'n'; figures remain open)
% plotnan, (char) = if 'n' does not plot scores for samples with nan in 
%                    the corresponding metadata field%                    
%                    (default = 'y'; plots nans in grey)
%
% OUTPUT
% args (struct) with fields as above plus any generated during the run
%
% basic run >> pca_plotCS(ppm,model);
%
% caroline.sands01@imperial.ac.uk
% 12/11/12

handles = {};

% Extract any optional input parameters
args = struct;
for i=1:2:length(varargin); 
    args.(varargin{i}) = varargin{i+1};
end

% Define defaults:

% if model is PLS - plot scores only
if(isfield(model, 'o2plsModel'))
    model.T = [model.cv.Tcv, model.o2plsModel.To];
    model.P = [model.o2plsModel.W, model.o2plsModel.Wo]';
    args.nc = reshape([ones(model.args.oax,1), (1:model.args.oax)'+1], 1, model.args.oax*2) ;
    model.VarExp = [model.o2plsModel.R2X(1), model.o2plsModel.R2Xo(2:end)];
end


% default is NMR data
if(~isfield(args,'datatype')||isempty(args.datatype)); args.datatype = 'NMR'; end 

% generate all plots
if(~isfield(args,'plottype')||isempty(args.plottype)); args.plottype = 'all'; end 

% class membership: all samples in same class
if(~isfield(args,'class')||isempty(args.class)); args.class = ones(length(model.T(:,1)),1); end 
[ns, nclasses] = size(args.class);

% make a dataset if not already
if(~isa(args.class,'dataset')&&~isa(args.class,'table'))
    if(~isfield(args,'class_labels'));
        args.class_labels = strcat('class',cellstr(num2str((1:nclasses)')));
    end
    
    args.class = array2table(args.class,'VariableNames',args.class_labels);
end

if(isfield(model, 'o2plsModel'))
    args.class(model.args.samplesRemoved==1,:) = [];
end

% plot all components
if(~isfield(args,'components')||isempty(args.components)); args.components = 1:size(model.T,2); end 
nc = length(args.components);
if(mod(nc,2)~=0); args.components(nc+1) = args.components(1); nc = nc+1; end

% Ensure sample labels is str (not numeric)
if(isfield(args,'sample_labels')&&isnumeric(args.sample_labels)); 
    args.sample_labels = num2str(args.sample_labels); 
end

% Do not automatically close loadings plots
if(~isfield(args,'closefig')); args.closefig = 'n'; end

% Plot nans
if(~isfield(args,'plotnan')); args.plotnan = 'y'; end

% Make variables consistant for mypca/JTPcrossValudatedPCA generated models
if(isfield(model,'R2')); % JTPcrossValudatedPCA.m
    model.VarExp = model.R2(:) - [0;model.R2(1:end-1)];
else % mypca
    model.P = model.P';
end

% Create folder to save in
if(isfield(args,'savedir')&&~isdir(args.savedir))
    mkdir(args.savedir);
end

% Plot scores; for each pair of components, and each class stratification

if(strcmp('all',args.plottype)||strcmp('scores',args.plottype))
    
    Fcrit = finv(0.95,2,ns-2); % critical value for hotellings T2 
    
    for k = 1:nclasses % for each group splitting
        
        try
            name = args.class.Properties.VarNames{k};
        catch
            name = args.class.Properties.VariableNames{k};
        end
        data = args.class.(name);
        
        name = strrep(name,'_',' ');
        
        % convert logical data to numeric
        if(islogical(data)); data = double(data); end
        
        fprintf('\nPCA scores plots coloured by %s\n', name)
        
        if strcmp(name,'TreatmentGroup')
            break1 = '';
        end
        
        % number of unique entries
        if(isnumeric(data))
            uniq = unique(data(~isnan(data))); 
        else
            uniq = unique(data);
        end
        
        nuniq = length(uniq);
        
        % if data is numerical, and number of unique entries is greater
        % than 30, then bin into 30 groups   
        if(isnumeric(data)&&nuniq>30)
            [data,groupBounds] = CJSbinContin(data,30);
            groupBounds(end) = max(args.class.(name));
            uniq = unique(data(~isnan(data))); nuniq = length(uniq);
            if(any(cell2mat((regexpi(name,{'date','time'})))))
                groupBounds = datestr(groupBounds);
                leg = cellstr(strcat(groupBounds(1:end-1,:),' : ', groupBounds(2:end,:)));
                if(nuniq<30);
                    del = ismember(1:30,uniq);
                    leg = leg(del,:);
                end
                
            else
                leg = cell(length(uniq),1); 
                j = 1;
                for i = 1:length(uniq)
                    if(any(ismember(1:30,uniq(i)))) 
                        leg{j} = sprintf('%.4g:%.4g',groupBounds(uniq(i)),groupBounds(uniq(i)+1)); j=j+1;
                    end
                end
            end
                        
        else
            leg = uniq;
        end
        
        if(isnumeric(leg)&&~any(cell2mat((regexpi(name,{'date','time'}))))); 
            leg = cellstr(num2str(leg));
        elseif(isnumeric(leg)&&any(cell2mat((regexpi(name,{'date','time'})))));
            leg = cellstr(datestr(leg));
        elseif(isa(leg,'char'))
            leg = strsplit(leg)'; leg(end) = [];
            leg = cellstr(leg);
        end
        
        if(isnumeric(data)&&any(isnan(data))&&strcmp(args.plotnan,'y'));
            leg{end+1} = 'NaN'; 
        end
        
        leg = strrep(leg, '_', ' ');
        
        if(~isnumeric(data))
            temp = zeros(size(data));
            strnan = find(strcmpi(uniq, 'nan'));
            if(~isempty(strnan))
                temp(strcmpi(data, 'nan')) = nan;
                uniq(strnan) = [];
                nuniq = length(uniq);
                leg(strnan) = [];
                leg{end+1} = 'NaN';
            end
            for i=1:nuniq
                temp(strcmp(data,uniq(i))) = i;
            end
            data = temp;
            uniq = unique(data);
        end
        
        % for each pair of components
        for j=1:2:nc-1

            figure; set(gcf,'color','white'); hold on;
                        handles{ end + 1 } = gcf;
            color = colormap(jet(nuniq));
            
            for i=1:nuniq
                plot(model.T(data==uniq(i),args.components(j)),...
                    model.T(data==uniq(i),args.components(j+1)),...
                    'o','MarkerEdgeColor',color(i,:),'MarkerSize',5)
                % ,'MarkerFaceColor',color(i,:)
            end
            
            % plot any NaNs
            if(isnumeric(data)&&any(isnan(data))&&strcmp(args.plotnan,'y'))
                plot(model.T(isnan(data),args.components(j)),model.T(isnan(data),args.components(j+1)),'o',...
                    'MarkerEdgeColor',[0.7020 0.7020 0.7020],'MarkerSize',5);
            end
            
            % add sample labels if included
            if(isfield(args,'sample_labels'))
                paperSize = get(gcf,'PaperSize');
                addval = ((abs(max(model.T(:,args.components(j))))+abs(min(model.T(:,args.components(j)))))/paperSize(1))/5;
                text(model.T(:,args.components(j))+addval,model.T(:,args.components(j+1)),args.sample_labels);
            end
            
            % add labels and legend
            grid
            legend(leg,'location','NorthEastOutside');
            
            if(isfield(model, 'o2plsModel'))
                xlabel(sprintf('Tcv (%.2f%%)', model.VarExp(1)*100));
                ylabel(sprintf('To%g (%.2f%%)', args.components(j+1)-1, model.VarExp(j+1)*100));
            else
                xlabel(sprintf('PC%g (%.2f%%)',args.components(j),model.VarExp(args.components(j))*100));
                ylabel(sprintf('PC%g (%.2f%%)',args.components(j+1),model.VarExp(args.components(j+1))*100));
                axis equal
            end
            
            % plot Hotellings T2 ellipse
            a = sqrt(var(model.T(:,args.components(j)))*Fcrit*2*((ns-1)/(ns-2)));
            b = sqrt(var(model.T(:,args.components(j+1)))*Fcrit*2*((ns-1)/(ns-2)));
            ellipse(a,b,0,0,0,'k');
            
            % plot axis lines
            Xlims = get(gca,'XLim'); line(Xlims,[0,0],'Color','k')
            Ylims = get(gca,'YLim'); line([0,0],Ylims,'Color','k')
            
            % add title
            if(isfield(model, 'o2plsModel'))
                title(sprintf('PLS scores coloured by %s TcvvsTo%g', name, args.components(j+1)-1));
                set(gcf,'name', sprintf('PLS scores coloured by %s TcvvsTo%g', name, args.components(j+1)-1),...
                    'NumberTitle','off')
                
                % save
                if(isfield(args,'savedir'))
                    saveas(gcf,fullfile(args.savedir,sprintf('PLS scores coloured by %s TcvvsTo%g', name, args.components(j+1)-1))); snapnow; close
                end
                
            else
                title(sprintf('PCA scores coloured by %s PC%gvs%g',name,args.components(j),args.components(j+1)));
                set(gcf,'name',sprintf('PCA scores coloured by %s PC%gvs%g',name,args.components(j),args.components(j+1)),...
                    'NumberTitle','off')
                
                % save
                if(isfield(args,'savedir'))
                    saveas(gcf,fullfile(args.savedir,sprintf('PCA scores coloured by %s PC%gvs%g',...
                        name,args.components(j),args.components(j+1)))); snapnow; close
                end
            end
            
        end
    end
end


if(strcmp('scores_allVSall',args.plottype))
    
    if(args.components(end) == args.components(1))
        args.components(end) = [];
    end
    nc = length(args.components);
    
    plotx = reshape(repmat(args.components, nc, 1), 1, nc*nc);% plotx = reshape(repmat(1:nc, nc, 1), 1, nc*nc); 
    ploty = reshape(repmat((args.components)', 1, nc), 1, nc*nc);% ploty = reshape(repmat((1:nc)', 1, nc), 1, nc*nc);
   
    Fcrit = finv(0.95,2,ns-2); % critical value for hotellings T2 
    
    for k = 1:nclasses % for each group splitting
        
        try
            name = strrep(args.class.Properties.VarNames{k}, '_', ' ');
        catch
            name = strrep(args.class.Properties.VariableNames{k}, '_', ' ');
        end
        data = args.class.(name);
                
        % convert logical data to numeric
        if(islogical(data)); data = double(data); end
        
        %fprintf('\nPCA scores plots coloured by %s\n', name)
        
        % number of unique entries
        if(isnumeric(data))
            uniq = unique(data(~isnan(data))); 
        else
            uniq = unique(data);
        end
        
        nuniq = length(uniq);
%         if(nuniq==1)
%             continue
%         end
        
        % if data is numerical, and number of unique entries is greater
        % than 30, then bin into 30 groups   
        if(isnumeric(data)&&nuniq>30)
            [data,groupBounds] = CJSbinContin(data,30);
            groupBounds(end) = max(args.class.(name));
            uniq = unique(data(~isnan(data))); nuniq = length(uniq);
            if(any(cell2mat((regexpi(name,{'date','time'})))))
                groupBounds = datestr(groupBounds);
                leg = cellstr(strcat(groupBounds(1:end-1,:),' : ', groupBounds(2:end,:)));
                if(nuniq<30);
                    del = ismember(1:30,uniq);
                    leg = leg(del,:);
                end
                
            else
                leg = cell(length(uniq),1); 
                j = 1;
                for i = 1:length(uniq)
                    if(any(ismember(1:30,uniq(i)))) 
                        leg{j} = sprintf('%.4g:%.4g',groupBounds(uniq(i)),groupBounds(uniq(i)+1)); j=j+1;
                    end
                end
            end
                        
        else
            leg = uniq;
        end
        
        if(isnumeric(leg)&&~any(cell2mat((regexpi(name,{'date','time'}))))); 
            leg = cellstr(num2str(leg));
        elseif(isnumeric(leg)&&any(cell2mat((regexpi(name,{'date','time'})))));
            leg = cellstr(datestr(leg));
        elseif(isa(leg,'char'))
            leg = strsplit(leg)'; leg(end) = [];
            leg = cellstr(leg);
        end
        
        if(isnumeric(data)&&any(isnan(data))&&strcmp(args.plotnan,'y')); 
            leg{end+1} = 'NaN'; 
        end
        
        if(~isnumeric(data))
            temp = zeros(size(data));
            for i=1:nuniq
                temp(strcmp(data,uniq(i))) = i;
            end
            data = temp;
            uniq = unique(data);
        end
        
        
        figure;
        handles{ end + 1 } = gcf;
        set(gcf,'color','white', 'name', sprintf('PCA scores coloured by %s', name), 'number','off')
        if(nuniq == 1)
            color = [0 0 1];
        elseif(nuniq == 2)
            color = [0 0 1; 1 0 0];
        else
            color = colormap(jet(nuniq));
            color(1,:) = [0 0 0]; 
        end
        
        % for each pairing of components
        for j=1:1:nc*nc
            
            subplot(nc, nc, j)
            hold on

            if(plotx(j) ~= ploty(j))
                for i=1:nuniq
                    plot(model.T(data==uniq(i), plotx(j)),...
                        model.T(data==uniq(i), ploty(j)),...
                        'o','MarkerEdgeColor',color(i,:),'MarkerSize',5)
                end
                
                % plot any NaNs
                if(isnumeric(data)&&any(isnan(data))&&strcmp(args.plotnan,'y'))
                    plot(model.T(isnan(data), plotx(j)), model.T(isnan(data), ploty(j)),'o',...
                        'MarkerEdgeColor',[0.7020 0.7020 0.7020],'MarkerSize',5);
                end
                
                grid
                
                % plot Hotellings T2 ellipse
                a = sqrt(var(model.T(:, plotx(j)))*Fcrit*2*((ns-1)/(ns-2)));
                b = sqrt(var(model.T(:, ploty(j)))*Fcrit*2*((ns-1)/(ns-2)));
                ellipse(a,b,0,0,0,'k');
                axis equal
                
                % plot axis lines                
                Xlims = get(gca,'XLim'); line(Xlims,[0,0],'Color','k')
                Ylims = get(gca,'YLim'); line([0,0],Ylims,'Color','k')

 
            else
                text(0.2, 0.5, sprintf('PC%g (%.2f%%)', plotx(j), model.VarExp(plotx(j))*100))
                set(gca,'XColor','white')
                set(gca,'YColor','white')
            end
            
            % add legend
            if(plotx(j) == args.components(1) && ploty(j) == args.components(end))
                legend(leg,'location','NorthEastOutside');
            end
            
            % add title
            if(plotx(j) == args.components(1) && ploty(j) == round(args.components(1)+((args.components(end)-args.components(1))/2)))
                title(sprintf('PCA scores coloured by %s', name))
            end
            
        end
        
        % save
        if(isfield(args,'savedir'))
            saveas(gcf, fullfile(args.savedir,sprintf('PCA scores coloured by %s', name))); snapnow; close
        else
            snapnow
        end
    end
end



% plot loadings - as 2D (PC1 vs PC2 etc) scatter plot 

if(strcmp('all',args.plottype)||strcmp('loadings_scatter',args.plottype)||strcmp('loadings',args.plottype))
    fprintf('\nPCA loadings scatter plots for paired components\n')
    
    for j=1:2:nc-1
       
        Loading1=model.P(args.components(j),:);
        Loading2=model.P(args.components(j+1),:);
        
        CJSquerySplot(Loading1, Loading2, ppm)
        
        grid
        
        xlabel(['PC',num2str(args.components(j))]);
        ylabel(['PC',num2str(args.components(j+1))]);
        
        title(sprintf('PCA loadings PC%gvs%g',args.components(j),args.components(j+1)));
        set(gcf,'name',sprintf('PCA loadings PC%gvs%g',args.components(j),args.components(j+1)),'NumberTitle','off')
        
        if(isfield(args,'savedir'))
            saveas(gcf,fullfile(args.savedir,sprintf('PCA loadings PC%gvs%g.fig',...
                args.components(j),args.components(j+1)))); snapnow; close
        end
    end
end


% plot loadings - for each component projected onto pseudo-spectrum
% back-scaled covariance matrix of the PCA loadings pseudo-spectrum 
% coloured by the weight of the loading

if(strcmp('all',args.plottype)||strcmp('loadings_line',args.plottype)||strcmp('loadings',args.plottype))
    fprintf('\nPCA loadings color plots for each component\n')
    
    Xscale = mjrScale(X,'mc','no'); Xscale = Xscale.X;
    Tscale = mjrScale(model.T,'mc','no'); Tscale = Tscale.X;

    for j=1:nc
        [corrVect,covVect] = corCovCalc(Xscale,Tscale(:,args.components(j)));   
        CJSqueryPlot(ppm,covVect,abs(corrVect),'ppm',ppm,'r',abs(corrVect));
        hcbar = colorbar;
        set(get(hcbar,'Title'),'string','correlation');
        ylabel('Covariance (mean centred data) (a.u.)')
%         title(sprintf('PCA correlation to T PC%g',args.components(j)));
%         set(gcf,'name',sprintf('PCA correlation to T PC%g',args.components(j)),'NumberTitle','off')
%         
%         if(strcmpi(args.datatype,'MS'))
%             set(gca,'Xdir', 'normal', 'xlim', [0 length(ppm)]);
%             xlabel('MS feature number');
%         end
%         
%         if(isfield(args,'savedir'))
%             saveas(gcf,fullfile(args.savedir,sprintf('PCA correlation to T PC%g.fig',...
%                 args.components(j)))); snapnow;
%             % don't close figure automatically else datatip functionality
%             % of CJSqueryPlot fails - datatip must be selected then figure
%             % saved after which this will work fine!
%             if(strcmp(args.closefig,'y'))
%                 close
%             end
%         end
        
%         CJSqueryPlot(ppm,covVect,abs(model.P(j,:)),'ppm',ppm,'P', model.P(j,:))
%         hcbar = colorbar;
%         set(get(hcbar,'Title'),'string','P');
        title(sprintf('PCA loadings PC%g',args.components(j)));
        set(gcf,'name',sprintf('PCA loadings PC%g',args.components(j)),'NumberTitle','off')
        
        if(strcmpi(args.datatype,'MS'))
            set(gca,'Xdir', 'normal', 'xlim', [0 length(ppm)]);
            xlabel('MS feature number');
        end
        
        if(isfield(args,'savedir'))
            saveas(gcf,fullfile(args.savedir,sprintf('PCA loadings PC%g.fig',...
                args.components(j)))); snapnow;
            % don't close figure automatically else datatip functionality
            % of CJSqueryPlot fails - datatip must be selected then figure
            % saved after which this will work fine!
            if(strcmp(args.closefig,'y'))
                close
            end
        end
    end
    
end

function[corrVect,covVect] = corCovCalc(X,Y,method)

% calculate correlation and covariance
    
if(nargin<3); method = 'pearson'; end

[~,n]=size(X);
remainder=mod(n,1000);

corrVect = corr(X,Y,'type',method)';

i=0;
if(floor(n/1000)>0)
    for i = 1:floor(n/1000)
        start=(1+(i-1)*1000);
        stop=(i*1000);
        covVect( start:stop)=(1/(length(Y)-1))*Y'*X(:,start:stop);
    end
end

start=(1+(i)*1000);
stop=(i*1000+remainder);
covVect( start:stop)=(1/(length(Y)-1))*Y'*X(:,start:stop);