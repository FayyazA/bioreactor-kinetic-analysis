function result = createMask_BRP_MCT4_black(RGB,filename)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 29-May-2018
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 0.001;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 0.001;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 0.001;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;
BW_out = bwareafilt(BW, 1000);

% Get properties.
prop_table = regionprops(BW_out, {'Area', 'Eccentricity', 'EquivDiameter', 'EulerNumber', 'MajorAxisLength', 'MinorAxisLength', 'Orientation', 'Perimeter'});
for i=1:length(prop_table)
    area(i)=prop_table(i,1).Area;
end
v=size(maskedRGBImage);
per_area=sum(area)/(v(1)*v(2))
sum_pixels = sum(area);
result = [per_area,sum_pixels];
save([char(filename) 'black' '.mat']);
end